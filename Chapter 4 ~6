#include <iostream>
#include <vector>
#include<array>
#include <cstring>
#include<string>
#include<climits>
#include<cctype>
#include<fstream>
using namespace std;

/*6.3 function
void showmenu()
{
	cout << "please enter one of the following choices:\n"
		"c)carnivore              p)pianist\n"
		"t)tree                   g)game\n";
}
//6.4 function
void bopmenu()
{
	cout << "Benevolent Order of Programmers Report\n"
		"a.display by name      b.display by title\n"
		"c.display by bopname   d. display by preference\n"
		"q.quit\n"
		"Enter your choice: ";
}*/


int main() {
	/* 数组名是数组的地址，用引号括起来的字符串常量也是地址。

	4.1
	struct student {
		char first_name[20];
		char last_name[20];
		char grade;
		int age;
	};


	student one;
	cout << "what is your first name?" << endl;
	cin.getline(one.first_name,20);
	cout << "What is your last name?" << endl;
	cin.getline(one.last_name, 20);
	cout << "what letter grade do you deserve?" << endl;
	cin >> one.grade;
	one.grade++;												//这里必须要完成叠加，在cout那里再叠加无效，原因未知。
	cout << "what is your age?" << endl;
	cin >> one.age;
	cout << "Name: " << one.last_name << ", " << one.first_name << endl;
	cout << "Grade: " << one.grade<< endl;
	cout << "Age: " << one.age << endl;*/

	/*4.2

	读取字符时候
	cin 遇到空格符和回车符就停止读入
	cin.get() 可以读取空格符和回车符。
	想读取一行：
		读取char类型用
		cin.getline(name,size)或者
		cin.get(name,size)，但是这时候并没有获取回车符还要加上cin.get()读取换行符。
		读取string类型用
		getline(cin,variable_name)

	原程序是
	const int ArSize = 20;
	char name[ArSize];
	char dessert[ArSize];
	cout << "Enter your name:\n";
	cin.getline(name,ArSize);
	cout << "Enter your favorite dessert:\n";
	cin.getline(dessert,ArSize);
	cout << "I have some delicious " << dessert;
	cout << " for you, " << name << ".\n";
	return 0；

	如果变量是string形式，则读取一行的形式不同。

	string name;
	string dessert;
	cout << "Enter your name:\n";
	getline(cin,name);
	cout << "Enter your favorite dessert:\n";
	getline(cin,dessert);
	cout << "I have some delicious " << dessert;
	cout << " for you, " << name << ".\n";
	return 0； */



	/*4.3 字符数组拼接
	char first_name[20];
	char last_name[20];
	char full_name[40];
	cout << "Enter your first name: " << endl;
	cin.getline(first_name,20);
	cout << "Enter your last name: " << endl;
	cin.getline(last_name, 20);
	strcpy_s(full_name, first_name);
	strcat_s(full_name,", ");
	strcat_s(full_name, last_name);
	cout << "Here is the information in a single string: " << full_name << endl;

	/*4.4 考察字符串组拼接
	string first_name;
	string last_name;
	string full_name;
	cout << "Enter your first name: " << endl;
	getline(cin,first_name);
	cout << "Enter your last name: " << endl;
	getline(cin,last_name);
	full_name = first_name + ", " + last_name;
	cout << "Here is the information in a single string: " <<full_name << endl;*/

	/*4.5
	  struct Candybar{
		char brand[20];
		float weight;
		int calory;
	  };

	  结构体赋值，需要等号，每个单元是逗号
		Candybar snack={
		  "Mocha",
		  2.3,
		  350,
		};

		cout<<snack.brand<<endl;*/


		/*4.6
			struct CandyBar {
				char brand[20];
				float weight;
				int calory;
			};
			CandyBar snacks[3] = {
				{"Mocha Munch", 2.3, 350},
				{"Mocha Munch", 2.3, 350},
				{"Mocha Munch", 2.3, 350}
			};
			cout << snacks[0].brand << endl;
			cout << snacks[0].weight << endl;
			cout << snacks[0].calory << endl;
			cout << snacks[1].brand << endl;
			cout << snacks[1].weight << endl;
			cout << snacks[1].calory << endl;
			cout << snacks[2].brand << endl;
			cout << snacks[2].weight << endl;
			cout << snacks[2].calory << endl;

		/*4.7 结构体
		struct pizza {
			string name;
			float dia;
			float weight;
			};
		pizza pizza_information {};
		cout << "please input the pizza company name:" << endl;
		getline(cin, pizza_information.name);
		cout << "please input the diameter of the pizza:" << endl;
		cin >> pizza_information.dia;
		cout << "please input the weight of the pizza:" << endl;
		cin >> pizza_information.weight;
		cout <<"name:" <<pizza_information.name << endl;
		cout << "diameter:"_<<information.dia << endl;
		cout << "weight:"<<pizza_information.weight << endl;*/

		/*4.8 采用new创建动态结构，有两种赋值方式注意区分 method1
		struct pizza {
			string name;
			float diameter;
			float weight;
			};

		pizza *p = new pizza;
		cout << "diameter:" << endl;
		cin >> (p->diameter);
		cin.get();   //注意，上一个语句输入直径后，会敲入回车符，如果不获取这个回车符，在下一行getline会获取这个回车符而得不到任何输入。
		cout << "name:" << endl;
		getline(cin, p->name);
		cout << "weight:" << endl;
		cin >> (p->weight);
		cout << "name:" << p->name << endl;
		cout << "diamter:" << p->diameter << endl;
		cout << "weight:" << p->weight << endl;
		delete p;

		//method2
		struct pizza {
			string name;
			float diameter;
			float weight;
		};

		pizza *p = new pizza;
		cout << "diameter:" << endl;
		cin >> (*p).diameter;
		cin.get();   //注意，上一个语句输入直径后，会敲入回车符，如果不获取这个回车符，在下一行getline会获取这个回车符而得不到任何输入。
		cout << "name:" << endl;
		getline(cin, (*p).name);
		cout << "weight:" << endl;
		cin >> ((*p).weight);
		cout << "name:" << (*p).name << endl;
		cout << "diamter:" << (*p).diameter << endl;
		cout << "weight:" << (*p).weight << endl;
		delete p;*/


		/*4.9 创建动态数组 包含了两种访问方式
		struct CandyBar {
			string brand;
			float weight;
			int calories;
			};
		CandyBar *p = new CandyBar[4];
		p[0].brand = "Mocha Munch";
		p[0].weight = 2.3;
		p[0].calories = 350;
		p[1].brand = "Mocha Munch";
		p[1].weight = 2.3;
		p[1].calories = 350;
		p[2].brand = "Mocha Munch";
		p[2].weight = 2.3;
		p[2].calories = 350;
		(p+3)->brand = "Mocha Munch";
		(p+3)->weight = 2.3;
		(p+3)->calories = 350;
		cout << (p+3)->brand << endl;
		delete[] p;*/

		/*4.10  创建array
		array<double, 3> time;
		cout << "input your first time:" << endl;
		cin >> time[0];
		cout << "input your second time:" << endl;
		cin >> time[1];
		cout << "input your third time:" << endl;
		cin >> time[2];
		cout << "Round 3, " << (time[0] + time[1] + time[2]) / 3.0 << endl;*/


		/*chapter5
		for(initialization;test-expression;update-expression)
		test- expression是在执行循环之前做判断，update-expression是循环之后做更新

		++a 和a++效果一样，但是执行顺序不一样，cout<<++a<<endl,这时候是输出a+1，但是cout<<a++<<endl，这时候是输出a。
		后缀形式比前缀形式运算速度稍慢，是因为后缀形式先复制一个副本，然后+1，然后把副本返回，而前缀形式直接+1
		p154 需要注意*p++这种运算顺序，先p地址+1，然后*解除引用却是未递增前的。结果是输出了*p的值，然后p的地址加了1。
		strcomp（），比较两个字符串，相等返回0，不等返回非0，正负根据asic码顺序，前一个字符串顺序靠后，则为正数。

		cin忽略空格和换行符，发送给cin的输入会被缓冲，直到按下回车键才被发送到程序做处理。
		cin.get()是可以读取包括空格，制表还有换行符所有字符。
		有两种形式，cin.get(ch)和ch=cin.get(),cin.get(ch)是通过返回转换为false的bool值来指出已到达EOF，而cin.get()成员函数则通过返回EOF值来指出已到达EOF。
		ch = cin.get() 和cin.get(ch)等效。
		cin.fail()是指是否接受失效，为1时表示接受失效，则为读取结尾， cin.fail()==false;!cin.fail();cin;cin.get(ch);ch=cin.get(),ch!=EOF;(ch=cin.get())!=EOF;

		for 循环基于范围 for(int x:{3,2,4,5})

		*/

		/*5.1
		int x;
		int y;
		long sum = 0;
		cout << "please input first value:" << endl;
		cin >> x;
		cout << "please input second value:" << endl;
		cin >> y;

		for (int i = x; i <= y; ++i)
		{
			sum = sum + i;
		}
		cout << sum << endl;*/

		/*5.2

		const int Size = 100;
		array<double long, Size> fac;
		fac[0] = fac[1] = 1;
		for (int i = 2; i < Size; ++i)
		{
			fac[i] = i*fac[i-1] ;
		}

		cout << "!100:" << fac[99] << endl;*/


		/*5.3
		long double sum = 0;
		long double input;
		cout << "please input a number: " << endl;
		cin >> input;
		while (input!= 0)
		{
			sum += input;
			cout << "total is :" << sum << endl;
			cout << "please input a number: " << endl;
			cin >> input;
		}
		cout << "exit" << endl;*/

		/*5.4
		double income_Dap=0.0;
		double income_Cleo=0.0;
		int original_Dap = 100;
		int original_Cleo = 100;
		double interest_Dap = 0.0;
		double interest_Cleo = 0.0;
		int n = 1;

		while(income_Cleo<=income_Dap)
		{
			interest_Dap = 0.1 * original_Dap;
			income_Dap += interest_Dap;

			interest_Cleo = (original_Cleo + income_Cleo) * 0.05;
			income_Cleo +=interest_Cleo;
			++n;
		}
		cout << "year = " << n << endl;


		double daphne = 100.0;
		double cleo = 100.0;
		int year;

		for (year = 1; cleo <= daphne; ++year)
		{
			daphne += 10.0;
			cleo *= 1.05;
		}

		cout << year << " years later, " << endl;
		cout << "Daphne has $" << daphne << endl;
		cout << "Cleo has $" << cleo << endl; */

		/* 5.5
		string month[12] = { "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec" };
		int sales[12];
		int sum = 0;
		for (int i = 0; i < 12; ++i) {
			cout << month[i] << " :"<<endl;
			cin >> sales[i];
			sum += sales[i];
		}
		cout << "Whole year sales: " << sum << endl;*/


		/*5.6
		string month[12] = { "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec" };
		int sales[12][3];
		for (int j = 0; j < 3; ++j) {
			cout << (j + 1) << " year" << endl;
			for (int i = 0; i < 12; ++i)
			{
				cout << month[i] << ": " << endl;
				cin >> sales[i][j];
			}
		}
		int sum[4] = {0};
		for (int j = 0; j < 3; j++) {
			for (int i = 0; i < 12; ++i)
			{
				sum[j] += sales[i][j];
			}
			sum[3] += sum[j];
			cout << (j +1)<< " year" << endl;
			cout << sum[j] << endl;
		}
		cout << "total " << endl;
		cout << sum[3] << endl;*/

		/*5.7
			struct car {
				string maker;
				int year;

			};

			int num_car;
			cout << "How many cars do you wish to catalog?" << endl;
			cin >> num_car;
			cin.get();
			car *p = new car [num_car];

			for (int i = 0; i < num_car; ++i)
			{
				cout << "Car #" << i+1 << ":" << endl;
				cout << "Please enter the maker: " << endl;
				getline(cin, p[i].maker);
				cout << "Please enter the year made: " << endl;
				cin >> p[i].year;
				cin.get();
			}
			cout << "Here is your collection: " << endl;
			for (int i = 0; i < num_car; ++i)
			{
				cout << p[i].year << " " << p[i].maker << endl;
			}
			delete[] p;			*/


			/*5.8
			const int size = 20;
			char ch[size];
			int count = 0;
			cout << "Enter words (to stop,type the word \"done\"):" << endl;
			cin >> ch;
			//数组形式的输入注意，同时，这里ch不会记录空格和换行符。注意size要足够，如果不够，那么字符数组不足以储存单词而导致崩溃，别忘了，cin是一直缓冲，直到回车符才开始到下一步。
			while (strcmp(ch,"done"))  //strcomp 内比较必须是数组
			{
				//cout << ch;
				++count;
				cin >> ch;
			}
			//cout << endl;

			cout << "You entered a total of " << count << " words" << endl;*/

			/*5.9
			int count = 0;
			string word;
			cout << "Enter words (to stop,type the word \"done\"):" << endl;
			cin >> word;
			while (word != "done")
			{
				++count;
				cin >> word;
			}
			cout << "You entered a total of " << count << " words" << endl; */

			/*5.10
				int row;
				cout << "enter number of rows: " << endl;
				cin >> row;

				for (int i = 0;i < row; ++i)
				{
					for (int t = 0; t < row - i-1; ++t)
					{
						cout << "." << "\t";
					}

					for (int j = 0; j < i+1; ++j)
					{
						cout << "*" << "\t";
					}
					cout << endl;
				}*/


				//Chapter 6
				/*
					1.取值范围测试，记住，例 if(17<age<35),这个条件永远成立，因为(17<age)要么为0要么为1，结果总小于35。应该用&&；
					2.!运算优先级告诉所有关系运算符和算术运算符，注意加括号；
					3.cctype有判断类型和修改大小写；
					4. ?: 运算符   expression1? expression2:expression3；
					5. switch必须要配break；
					6.break是跳出循环到后面的语句执行，countinue用于循环体，让程序跳过循环体中余下的代码开始新一轮循环；
					7.文件输出需要#include<fstream>，用法和iostream类似
						ofstream outFile; / create object for output
						outFile.open("xxxx.txt"); / associated with a file ,如果文件不存在，则新建一个该文件，如果文件存在，将其长度截断到0，丢弃原有内容（个人认为是覆盖的意思）
						outFile<<"context"<<endl;
						.
						.
						.
						outFile.close(); / done with file
					8. 读取文件中的数字
					   ifstream inFile;  /create object for input
					   inFile.open("xxxx.txt");
					   char filename[50];
					   cin>>filename;
					   inFile.open(filename);
					   if(!inFile.is_open())
					   {
							exit(EXIT_FAILURE);
					   }
					   double value;
					   inFile>>value;
					   while(inFile.good())
					   {
							sum+=value;
							inFile>>value;
					   }
					   if (inFile.eof())
					   {
						XXXX
					   }
					   else if (inFile.fail())
					   {
						XXXX
					   }
					   inFile.close();

					 9. !(x%26==0)&&x%2==0, 是x是偶数但不是26的倍数
				*/

				/*6.1
				char ch;
				cout << "enter text:";
				cin.get(ch);
				while (ch!='@')
				{
					if (islower(ch))
					{
						ch = toupper(ch);
					}
					else if (isupper(ch))
					{
						ch = tolower(ch);
					}
					if (!isdigit(ch))
					{
						cout << ch;
					}
					cin.get(ch);
				}
				cout << endl;*/


				/*6.2   注意<<运算符优先级要高于i++，即先输出i，后++， 然而比+要低，所以<<i+1,是输出i+1而不是i，参见512行
						//cin>>donation[i]中，如果在条件判别中，是被用作bool值

				const int Arrsize = 10;
				double donation[Arrsize];
				cout << "enter donation up to 10:" << endl;
				cout << "donation #1 : ";
				int i = 0;
				while (i < Arrsize && cin>>donation[i]) {
					if (++i < Arrsize)
					{
						cout << "donation #" << i+1 << " : ";
					}

				}
				double sum = 0.0;
				double avg=0.0;
				for (int j = 0; j < i; ++j)
				{
					sum += donation[j];
				}
				avg = sum / i ;
				int count_big=0;
				for (int m = 0; m < i; ++m)
				{
					if (donation[m] > avg)
						count_big++;
				}
				cout <<"average: "<< avg << endl;
				cout << "bigger number: " << count_big << endl;
				cout << "total: " << sum << endl;  */

				/*6.3   注意双引号是字符串，如果单个字符比较，需要用单引号！！！
					// 这里需要注意，while判断条件里面，不应该用cin.get(),因为如果输入一个字符然后回车，这相当于cin.get()得到了两个字符，所以要用cin

				char ch;
				showmenu();
				while (cin>>ch) {
					if (ch == 'c' || ch == 'p' || ch == 't' || ch == 'g') {
						switch (ch)
						{
						case 'c':
						case 'C': cout << "A maple is a carnivore." << endl;
							break;

						case 'p':
						case 'P': cout << "A maple is a carnivore." << endl;
							break;

						case 't':
						case 'T': cout << "A maple is a carnivore." << endl;
							break;

						case 'g':
						case 'G': cout << "A maple is a carnivore." << endl;
							break;
						}
					}
					else
						cout << "Please enter a c,p,t or g: \n";
				}*/


				/*6.4 注意细节，在switch中如果有变量，需要加括号，注意下面code第2个
					const int strsize = 20;
					struct bop {
						char fullname[strsize];
						char title[strsize];
						char bopname[strsize];
						int preference;
						};
					bop people[] = { {"zhiqiang","engineer","yang",1}, {"deyuan","controller","chen",0}, {"kaige","student","tan",2}};
					char ch;
					bopmenu();
					while (cin>>ch)
					{
						if (ch == 'a' || ch == 'b' || ch == 'c' || ch == 'd')
						{
							switch (ch)
							{
							case 'a':
								for (int i = 0; i < 3; ++i)
								{
									cout << people[i].fullname << endl;
								}
								cout << "Next choice:" << endl;
								break;

							case'b':
								for (int i = 0; i < 3; ++i)
								{
									cout << people[i].title << endl;
								}
								cout << "Next choice:" << endl;
								break;
							case'c':
								for (int i = 0; i < 3; ++i)
								{
									cout << people[i].bopname << endl;
								}
								cout << "Next choice:" << endl;
								break;
							case'd':
								for (int i = 0; i < 3; ++i)
								{
									switch (people[i].preference)
									{
									case 0:
										cout << people[i].fullname << endl;
										continue;
									case 1:
										cout << people[i].title << endl;
										continue;
									case 2:
										cout << people[i].bopname << endl;
										continue;
									}
								}
								cout << "Next choice:" << endl;
								break;
							}
						}
						else if(ch == 'q')
						{ cout << "Bye!" << endl;
							break;
						}

						else
						{
							cout << "Not a choice in menu. Next choice:" << endl;
						}
					}*/

					/*6.5

					cout << "Please input your income: \n";
					double income;
					while (cin >> income)
					{
						if (income < 0)
						{
							break;
						}
						else if (income>= 0 && income <= 5000)
						{
							cout << "no tax\n";
							cout << "Please input your income: \n";
						}
						else if (income >5000 && income <= 15000)
						{
							cout << "tax is: "<< (income - 5000)*0.1 << endl;
							cout << "Please input your income: \n";
						}
						else if (income > 15000 && income <= 35000)
						{
							cout << "tax is: " << ((income - 15000)*0.15+1000) << endl;
							cout << "Please input your income: \n";
						}
						else if (income > 35000)
						{
							cout << "tax is: " << ((income - 35000)*0.2 + 1000+3000) << endl;
							cout << "Please input your income: \n";
						}

					}
					cout << "Bye" << endl;*/


	/* 6.6
	struct donation_information {
		string name;
		double money;
	};

	cout << "Please input the number of donator: \n";
	int n;
	cin >> n;
	cin.get();
	donation_information *p = new donation_information[n];
	for (int i = 0; i < n; ++i)
	{
		cout << "donator name: \n";
		getline(cin,p[i].name);
		cout << "donation: \n";
		cin >> (p[i]).money;
		cin.get();
	}
	int count_1 = 0;
	int count_2 = 0;
	donation_information *grand_patrons = new donation_information[n];
	donation_information *patrons=new donation_information[n];
	for (int j = 0; j < n; ++j)
	{
		if ((p[j]).money >= 10000)
		{
			grand_patrons[count_1].name = p[j].name;
			grand_patrons[count_1].money =p[j].money;
			++count_1;
		}
		else if ((p[j]).money < 10000)
		{
			(patrons[count_2]).name = (p[j]).name;
			(patrons[count_2]).money = (p[j]).money;
			++count_2;
		}
	}
	cout << "Grand Patrons:\n";
	if (count_1 == 0)
	{
		cout << "None\n";
	}
	else
	{
		for (int j = 0; j < count_1; ++j)
		{
			cout << "Name: " << grand_patrons[j].name << '\t';
			cout << "Money: " << grand_patrons[j].money << '\n';
		}
	}

	cout << "Patrons:\n";
	if (count_2 == 0)
	{
		cout << "None\n";
	}
	else
	{
		for (int j = 0; j < count_2; ++j)
		{
			cout << "Name: " << patrons[j].name << '\t';
			cout << "Money: " << patrons[j].money << '\n';
		}
	}
	delete[]p;
	delete[]grand_patrons;
	delete[]patrons;*/


	/*6.7  字符串必须要用“”来进行比较
	string word;
	char ch;
	cout << "Enter words(q to quit): \n";
	cin>>word;
	int count_vowels = 0;
	int count_consonants = 0;
	int others = 0;
	while (word != "q")
	{
		ch = word[0]; 
		if (isalpha(ch))
		{
			if (ch == 'a' | ch == 'A' | ch == 'e' | ch == 'E' | ch == 'i' | ch == 'I' | ch == 'o' | ch == 'O' | ch == 'u' | ch == 'U')
			{

				++count_vowels;
			}
			else
			{
				++count_consonants;

			}

		}
		else
			others++;

		cin >> word;
	}
	cout << count_vowels << " words beginning with vowels" << endl;
	cout << count_consonants << " words beginning with consonants" << endl;
	cout << others << " others" << endl;*/
	
	/*6.8
	const int Size = 60;
	char filename[Size];
	cout << "Enter filename:\n";
	cin.getline(filename,Size);
	ifstream readfile;
	readfile.open(filename);
	if (!readfile.is_open())
	{
		exit(EXIT_FAILURE);
	}
	char ch;
	int count = 0;
	readfile >> ch;   //readfile 同cin，空格符和回车符不算
	while (readfile.good())

	{
		count++;
		readfile >> ch;
	}
	if (readfile.eof())
		cout << "End.\n";
	else if (readfile.fail())
		cout << "fail.\n";
	else
		cout << "unknown fail.\n";
	if (count == 0)
		cout << "no character.\n";
	else 
		cout << count << " characters\n";

	readfile.close();*/

	/*6.9
	struct donation_information {
		string name;
		double money;
	};
	cout << "Enter the txt:\n";
	char filename[60];
	cin.getline(filename, 60);
	ifstream readfile;         //这里其实是将readfile赋予对象功能。类似于cin
	readfile.open(filename);
	if (!readfile.is_open())
	{
		cout << "ouch" << endl;
		exit(EXIT_FAILURE);
	}

	int n;
	readfile >> n;
	readfile.get();
	if (readfile.fail())
	{
		cout << "check. Not a number.\n";
		exit(EXIT_FAILURE);
	}

	donation_information *p = new donation_information[n];
	for (int i=0;i<n;++i)
	{
		getline(readfile,(p+i)->name);  //因为readfile已经是对象了，对比cin，那么name是string时候的用法可类比用在这里
		readfile >> (p+i)->money;
		readfile.get();
	}
	int count_1 = 0;
	int count_2 = 0;
	donation_information *grand_patrons = new donation_information[n];
	donation_information *patrons = new donation_information[n];
	for (int j = 0; j < n; ++j)
	{
		if ((p[j]).money >= 10000)
		{
			grand_patrons[count_1].name = p[j].name;
			grand_patrons[count_1].money = p[j].money;
			++count_1;
		}
		else if ((p[j]).money < 10000)
		{
			(patrons[count_2]).name = (p[j]).name;
			(patrons[count_2]).money = (p[j]).money;
			++count_2;
		}
	}
	cout << "Grand Patrons:\n";
	if (count_1 == 0)
	{
		cout << "None\n";
	}
	else
	{
		for (int j = 0; j < count_1; ++j)
		{
			cout << "Name: " << grand_patrons[j].name << '\t';
			cout << "Money: " << grand_patrons[j].money << '\n';
		}
	}

	cout << "Patrons:\n";
	if (count_2 == 0)
	{
		cout << "None\n";
	}
	else
	{
		for (int j = 0; j < count_2; ++j)
		{
			cout << "Name: " << patrons[j].name << '\t';
			cout << "Money: " << patrons[j].money << '\n';
		}
	}
	delete[]p;
	delete[]grand_patrons;
	delete[]patrons; 
	readfile.close();*/
return 0;
}
